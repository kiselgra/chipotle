(require :chipotle)
(in-package :chipotle)

(lisp
 (defun atrous (filter n)
   (flet ((blow-up-row (row)
	    (let ((x (list (first row))))
	      (loop for y in (rest row)
		 do (setf x (append x
				    (make-list (1- (expt 2 n)) :initial-element 0)
				    (list y))))
	      (list x)))
	  (empty-row () (make-list (1+ (* (expt 2 n) (1- (cl:length filter)))) :initial-element 0)))
     (let ((x (blow-up-row (first filter))))
       (loop for y in (rest filter)
	  do (setf x (append x
			     (make-list (1- (expt 2 n)) :initial-element (empty-row))
			     (blow-up-row y))))
       x))))


(defmacro atrous-step (n &key (prefix "atrous") input output (arch 'cuda))
  (let ((in  (cl:if  input  input (cintern (format nil "~a~a" prefix (cl:1- n)))))
	(out (cl:if output output (cintern (format nil "~a~a" prefix n)))))
    `(edge ,(cintern (format nil "compute-~a~a" prefix n))
	   (:input ,in :output ,out :arch ,arch)
	   (deflocal :mask ,(atrous '((0.057118 0.124758 0.057118)
				      (0.124758 0.272496 0.124758)
				      (0.057118 0.124758 0.057118)) n)
		     :initially ((float r0 = (/ (,in 0 0 0) 255.0f))
				 (float g0 = (/ (,in 0 0 1) 255.0f))
				 (float b0 = (/ (,in 0 0 2) 255.0f))
				 (float r = 0.0f)
				 (float g = 0.0f)
				 (float b = 0.0f)
				 (float W = 0.0f))
		     :codelet (macrolet ((mask (rx ry)
					   `(let ((mh (lisp (floor (/ (cl:length mask) 2)))))
					      (lisp (nth (+ mh ,ry) (nth (+ mh ,rx) mask))))))
				(decl ((float R = (/ (,in rx ry 0) 255.0f))
				       (float G = (/ (,in rx ry 1) 255.0f))
				       (float B = (/ (,in rx ry 2) 255.0f))
				       (float w0 = (float-type (mask rx ry)))
				       (float rd = (- R r0))
				       (float gd = (- G g0))
				       (float bd = (- B b0))
				       (float w1 = (+ (* rd rd) (* gd gd) (* bd bd))))
				    (set w1 (* (fminf 1.0f (expf (- (* w1 1.0f)))) w0))
				    (set W (+ W w1))
				    (set r (+ r (* R w1))
					g (+ g (* G w1))
					b (+ b (* B w1)))))
		     :finally (set (,out 0) (* (/ r W) 255.0f)
				  (,out 1) (* (/ g W) 255.0f)
				  (,out 2) (* (/ b W) 255.0f))))))



(defmacro nightvision-filter (&key (iterations 3) (architecture cpu))
  (let ((arch (ensure-list architecture)))
  `(filter-graph blub
     (edge load-base (:output base) (load-image :file "test.jpg"))
     
     (atrous-step 0 :input base :arch (,@arch unsigned-char))
     ,@(loop for i from 1 to (cl:1- iterations) collect `(atrous-step ,i :arch (,@arch unsigned-char)))
     (atrous-step ,iterations :output prefiltered :arch (,@arch unsigned-char))

     (edge scoto (:input prefiltered :output scotopic2 :arch (,@arch unsigned-char))
	   (defpoint ()
	       (decl ((float r = (prefiltered 0))
		      (float g = (prefiltered 1))
		      (float b = (prefiltered 2))
		      (float X = (+ (* 0.5149f r) (* 0.3244f g) (* 0.1607f b)))
		      (float Y = (/ (+ (* 0.2654f r) (* 0.6704f g) (* 0.0642f b)) 3.0f))
		      (float Z = (+ (* 0.0248f r) (* 0.1248f g) (* 0.8504f b)))
		      (float V = (* Y (- (* 1.33f (+ 1.0f (/ (+ Y Z) X))) 1.68f)))
		      (float W = (+ X Y Z))
		      (float luma = (+ (* 0.2126f r) (* 0.7152f g) (* 0.0722f b)))
		      (float s = 0.0f);(/ luma 2.0f))
		      (float xl = (/ X W))
		      (float yl = (/ Y W))
		      (const float xb = 0.25f)
		      (const float yb = 0.25f))
		     (set xl (+ (* (- 1.0f s) xb) (* s xl))
			  yl (+ (* (- 1.0f s) yb) (* s yl))
			  Y  (+ (* V 0.4468f (- 1.0f s)) (* s Y))
			  X  (/ (* xl Y) yl)
			  Z  (- (/ X yl) X Y))
		     (decl ((float rgb_r = (+ (* 2.562263f X) (* -1.166107f Y) (* -0.396157f Z)))
			    (float rgb_g = (+ (* -1.021558f X) (* 1.977828f Y) (* 0.043730f Z)))
			    (float rgb_b = (+ (* 0.075196f X) (* -0.256248f Y) (* 1.181053f Z))))
			   (set (scotopic2 0) (fminf 255.0f (fmaxf 0.0f rgb_r)))
			   (set (scotopic2 1) (fminf 255.0f (fmaxf 0.0f rgb_g)))
			   (set (scotopic2 2) (fminf 255.0f (fmaxf 0.0f rgb_b)))))))

     (edge store-scotopic-pre-0 (:input atrous0)     (store-image :file "night-prefilter-0-atrous0.jpg"))
     (edge store-scotopic-pre-1 (:input atrous1)     (store-image :file "night-prefilter-1-atrous1.jpg"))
     (edge store-scotopic-pre-2 (:input atrous2)     (store-image :file "night-prefilter-2-atrous2.jpg"))
     (edge store-scotopic-pre-3 (:input prefiltered) (store-image :file "night-prefilter-3-atrous3.jpg"))
     (edge store-scotopic-pre-n (:input scotopic2)   (store-image :file "night-prefilter-4-scopto.jpg"))
     )))

(chp-preamble)

(nightvision-filter :architecture avx :iterations 3)

